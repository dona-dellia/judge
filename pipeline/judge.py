"""
This module create a judge who evaluate the similarity between
original Us and the enriched one.
"""
import re
import json
from langchain_groq import ChatGroq
from dotenv import load_dotenv
load_dotenv()

class Judge():
    """
    Create an object able to judge two user stories and grade the
    similarity between them.
    """

    ROOT = "./US/"
    ENRICHMENT = ["raw", "E1"]

    @staticmethod
    def judge_pair(model, us_original, us_enriched):
        """
        Assess us_original and us_enriched based on the similarity of
        their respective requests.

        Parameters
        ----------
        model: the LLM employed for the evaluation.
        us_original: the original use story
        us_enriched: the enriched version use story

        Return:
        -------
        ai_msg: the response generated by the LLM
        """
        prompt = f"""
            Compare these two sentences 1) "{us_original}" and 2)"{us_enriched}".
            
            Make sure that:    

                1. Take into consideration "only the request" of these sentences.   
                2. Generate a JSON structure for each submitted user story containing two variables: 
                    - result: A value BETWEEN 0 or 1 indicating the probability of equivalency between the request of the sentences. 
                    - motive: The reason justifying why the value was assigned in each case.
        
            The output must be as it follows. The structure should follow the format:
                json
                    "result": 0.33,
                    "motive": 'the explanation'
                
            Important:
            - The output must contain only the equivalence essessment JSON. Do not include any explanation, markdown (like json), comments, or any additional text before or after the JSON. The output must be a valid JSON object only.
        """
        ai_msg = model.invoke(prompt)
        return ai_msg

    @staticmethod
    def judge():
        """
        
        Compare all available user stories with one another and generate
        a JSON structure for each submitted user story containing two variables:

        result: A value BETWEEN 0 or 1 indicating the probability of equivalency.
        motive: The reason justifying why the value was assigned in each case.

        The output must contains only the json structure as follow:

        ```json
            {
                "result":0.33,
                "motive": 'the explanation'
            }
        ```
        """
        path = './uss.json'
        with open(path, 'r', encoding="utf-8") as file:
            content = file.read()
        llm = ChatGroq(temperature=0, model_name="llama-3.3-70b-versatile")
        prompt = f"""
                 For each item in the JSON structure: {content}, evaluate the pair of entries (raw, E1) and determine whether they are expressing the same requirement.
                 Generate a new JSON file containing, for each item in the original structure, two attributes:

                    - "result": assign the value 1 if the two requests are equivalent, or 0 if they differ.

                    - "motive": provide a brief explanation justifying why the requests are considered different (if applicable).
                 """
        ai_msg = llm.invoke(prompt)
        print(ai_msg)

    def create_json_all_us(self, us_limit):
        """
        Create a JSON file based on the 'Browser Use' logs,containing,
        for each user story, a pair (raw, enriched_1) comprising a text submission.

        Parameters
        -----------
        us_limit: The number of user stories after which the file should be created.

        A file named uss.json is generated upon completion of the method execution.
        """
        data = {}
        for i in range(1,us_limit+1,1):
            inner_dict = {}
            for enrichment_type in self.ENRICHMENT:
                path = f"{self.ROOT}{i}/{enrichment_type}/{enrichment_type}.txt"
                with open(path, 'r', encoding="utf-8") as file:
                    lines = file.readlines()
                    # Junta todas as linhas em uma única string, removendo espaços extras
                    content = ' '.join(line.strip() for line in lines if line.strip())
                    content = re.sub(r'\s+', ' ', content).strip()
                    inner_dict[enrichment_type] = content
            data[str(i)] = inner_dict
        with open('uss.json', 'w', encoding="utf-8") as file:
            json.dump(data, file, indent=2, ensure_ascii=False)
        print("arquivo impresso!")

if __name__ == "__main__":
    judg = Judge()
    #judge.create_json_all_us(10)
    judg.judge()
