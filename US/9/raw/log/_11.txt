 SystemMessage 
You are a precise browser automation agent that interacts with websites through structured commands. Your role is to:
1. Analyze the provided webpage elements and structure
2. Use the given information to accomplish the ultimate task
3. Respond with valid JSON containing your next action sequence and state assessment



INPUT STRUCTURE:
1. Current URL: The webpage you're currently on
2. Available Tabs: List of open browser tabs
3. Interactive Elements: List in the format:
   index[:]<element_type>element_text</element_type>
   - index: Numeric identifier for interaction
   - element_type: HTML element type (button, input, etc.)
   - element_text: Visible text or element description

Example:
[33]<button>Submit Form</button>
[] Non-interactive text


Notes:
- Only elements with numeric indexes inside [] are interactive
- [] elements provide context but cannot be interacted with



1. RESPONSE FORMAT: You must ALWAYS respond with valid JSON in this exact format:
   {
     "current_state": {
		"page_summary": "Quick detailed summary of new information from the current page which is not yet in the task history memory. Be specific with details which are important for the task. This is not on the meta level, but should be facts. If all the information is already in the task history memory, leave this empty.",
		"evaluation_previous_goal": "Success|Failed|Unknown - Analyze the current elements and the image to check if the previous goals/actions are successful like intended by the task. Ignore the action result. The website is the ground truth. Also mention if something unexpected happened like new suggestions in an input field. Shortly state why/why not",
       "memory": "Description of what has been done and what you need to remember. Be very specific. Count here ALWAYS how many times you have done something and how many remain. E.g. 0 out of 10 websites analyzed. Continue with abc and xyz",
       "next_goal": "What needs to be done with the next actions"
     },
     "action": [
       {
         "one_action_name": {
           // action-specific parameter
         }
       },
       // ... more actions in sequence
     ]
   }

2. ACTIONS: You can specify multiple actions in the list to be executed in sequence. But always specify only one action name per item.

   Common action sequences:
   - Form filling: [
       {"input_text": {"index": 1, "text": "username"}},
       {"input_text": {"index": 2, "text": "password"}},
       {"click_element": {"index": 3}}
     ]
   - Navigation and extraction: [
       {"open_new_tab": {}},
       {"go_to_url": {"url": "https://example.com"}},
       {"extract_page_content": {}}
     ]


3. ELEMENT INTERACTION:
   - Only use indexes that exist in the provided element list
   - Each element has a unique index number (e.g., "[33]<button>")
   - Elements marked with "[]Non-interactive text" are non-interactive (for context only)

4. NAVIGATION & ERROR HANDLING:
   - If no suitable elements exist, use other functions to complete the task
   - If stuck, try alternative approaches - like going back to a previous page, new search, new tab etc.
   - Handle popups/cookies by accepting or closing them
   - Use scroll to find elements you are looking for
   - If you want to research something, open a new tab instead of using the current tab
   - If captcha pops up, and you cant solve it, either ask for human help or try to continue the task on a different page.

5. TASK COMPLETION:
   - Use the done action as the last action as soon as the ultimate task is complete
   - Dont use "done" before you are done with everything the user asked you. 
   - If you have to do something repeatedly for example the task says for "each", or "for all", or "x times", count always inside "memory" how many times you have done it and how many remain. Don't stop until you have completed like the task asked you. Only call done after the last step.
   - Don't hallucinate actions
   - If the ultimate task requires specific information - make sure to include everything in the done function. This is what the user will see. Do not just say you are done, but include the requested information of the task.

6. VISUAL CONTEXT:
   - When an image is provided, use it to understand the page layout
   - Bounding boxes with labels correspond to element indexes
   - Each bounding box and its label have the same color
   - Most often the label is inside the bounding box, on the top right
   - Visual context helps verify element locations and relationships
   - sometimes labels overlap, so use the context to verify the correct element

7. Form filling:
   - If you fill an input field and your action sequence is interrupted, most often a list with suggestions popped up under the field and you need to first select the right element from the suggestion list.

8. ACTION SEQUENCING:
   - Actions are executed in the order they appear in the list
   - Each action should logically follow from the previous one
   - If the page changes after an action, the sequence is interrupted and you get the new state.
   - If content only disappears the sequence continues.
   - Only provide the action sequence until you think the page will change.
   - Try to be efficient, e.g. fill forms at once, or chain actions where nothing changes on the page like saving, extracting, checkboxes...
   - only use multiple actions if it makes sense.

9. Long tasks:
- If the task is long keep track of the status in the memory. If the ultimate task requires multiple subinformation, keep track of the status in the memory.
- If you get stuck, 

10. Extraction:
- If your task is to find information or do research - call extract_page_content on the specific pages to get and store the information.
11. Assert:
- If your task is to assert information, call assert_content on the specific pages to assert if the information is present on the page.
12. Fail:
- If your task failed more than once, try call extract_content on the specific page to help you out
13. DropDown:
- If you open you open a dropdown x and clicked in element y, you have to click again in dropdown x to exit the dropdown
  example: "click_element":{"index":45} (enter in the dropdown options)
		   "click_element":{"index":4}  (the element in the dropdown)
		   "click_element":{"index":4}  (exit the dropdown)
     - use maximum 1 actions per sequence

Functions:
Complete task: 
{done: {'text': {'type': 'string'}}}
Navigate to URL in the current tab: 
{go_to_url: {'url': {'type': 'string'}}}
Go back: 
{go_back: {}}
Click element: 
{click_element: {'index': {'type': 'integer'}, 'xpath': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}}
Input text into a input interactive element: 
{input_text: {'index': {'type': 'integer'}, 'text': {'type': 'string'}, 'xpath': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}}
Switch tab: 
{switch_tab: {'page_id': {'type': 'integer'}}}
Open url in new tab: 
{open_tab: {'url': {'type': 'string'}}}
Extract page content to retrieve specific information from the page, e.g. all company names, a specifc description, all information about, links with companies in structured format or simply links: 
{extract_content: {'goal': {'type': 'string'}}}
Scroll down the page by pixel amount - if no amount is specified, scroll down one page: 
{scroll_down: {'amount': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}}}
Scroll up the page by pixel amount - if no amount is specified, scroll up one page: 
{scroll_up: {'amount': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}}}
Send strings of special keys like Backspace, Insert, PageDown, Delete, Enter, Shortcuts such as `Control+o`, `Control+Shift+T` are supported as well. This gets used in keyboard.press. Be aware of different operating systems and their shortcuts: 
{send_keys: {'keys': {'type': 'string'}}}
If you dont find something which you want to interact with, scroll to it: 
{scroll_to_text: {'text': {'type': 'string'}}}
Get all options from a native dropdown: 
{get_dropdown_options: {'index': {'type': 'integer'}}}
Select dropdown option for interactive element index by the text of the option you want to select: 
{select_dropdown_option: {'index': {'type': 'integer'}, 'text': {'type': 'string'}}}

Remember: Your responses must be valid JSON matching the specified format. Each action in the sequence must be valid.

 HumanMessage 
Your ultimate task is: """GIVEN a user is on the component pets and pisits and wants to add a visit
WHEN they fill the fields
THEN the system should display all the visits associated to the pet

GIVEN a user is on the component pets and pisits and wants to add a visit
WHEN they leave the form with the description field empty 
THEN the system should display an error message""". If you achieved your ultimate task, stop everything and use the done action in the next step to complete the task. If not, continue as usual.

 HumanMessage 
Here are placeholders for sensitve data: ['x_name', 'x_password']To use them, write <secret>the placeholder name</secret>

 HumanMessage 
Example output:

 AIMessage 


 ToolMessage 
Browser started

 HumanMessage 
[Your task history memory starts here]

 HumanMessage 
Action result: üîó  Opened new tab with https://prism-cm-adapter-ge4.pnp4.pcf.dell.com/home

 HumanMessage 
Action result: üîó  Navigated to https://prism-cm-adapter-ge4.pnp4.pcf.dell.com/home

 HumanMessage 
Action result: ‚å®Ô∏è  Input <secret>x_name</secret> into index 2

 HumanMessage 
Action result: ‚å®Ô∏è  Input <secret>x_password</secret> into index 4

 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 6: Sign On

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 2:

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 2:

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 2:

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 3: Home

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 4: Change Objects

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 2:

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 2:

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 2:

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 2:

 HumanMessage 
[Task history memory ends here]
[Current state starts here]
You will see the following only once - if you need to remember it and you dont know it yet, write it down in the memory:
Current url: https://prism-cm-adapter-ge4.pnp4.pcf.dell.com/change-objects/search
Available tabs:
[TabInfo(page_id=0, url='about:blank', title=''), TabInfo(page_id=1, url='https://prism-cm-adapter-ge4.pnp4.pcf.dell.com/change-objects/search', title='Prism CM Adapter')]
Interactive elements from current page:
[Start of page]
[0]<button ></button>
[1]<img ></img>
[]|
[]PRISM CM Adapter
[]|
[]Change Objects
[]Pedro
[](READ_ONLY)
[]Feedback
[2]<nav aria-expanded="false"></nav>
[3]<a >Home</a>
[4]<a >Change Objects</a>
[5]<img ></img>
[6]<a >Deviations</a>
[7]<img ></img>
[8]<a >Pilot BOMs</a>
[9]<img ></img>
[10]<a >Adapter Config</a>
[11]<img ></img>
[12]<a >BOM Maintenance</a>
[13]<img ></img>
[14]<a >Revision Update</a>
[15]<img ></img>
[16]<a >Attribute Inquiry</a>
[17]<img ></img>
[18]<a >Manual Part Add</a>
[19]<img ></img>
[]Austin
[]Apr 1, 2025 ¬† 08:42:48
[]Chennai
[]Apr 1, 2025 ¬† 20:12:48
[]Limerick
[]Apr 1, 2025 ¬† 14:42:48
[]Penang
[]Apr 1, 2025 ¬† 22:42:48
[]Porto Alegre
[]Apr 1, 2025 ¬† 11:42:48
[]Xiamen
[]Apr 1, 2025 ¬† 22:42:48
[]Live Queue Totals
[20]<label >Regions</label>
[21]<mat-select role="combobox" placeholder="Select Regions" tabindex="0" aria-expanded="false">All</mat-select>
[]New
[]0
[]Waiting
[]373
[]Hold
[]0
[]Approved
[]19
[]Failed
[]271
[]Ad Hoc
[]0
[]Waiting Deviation
[]0
[]Search
[22]<label >Change Number</label>
[23]<input value="" placeholder="Enter Change Number" type="text" name="changenumber"></input>
[24]<label >Change Object Type</label>
[25]<mat-select role="combobox" placeholder="Select Object Type" tabindex="0" aria-expanded="false">All</mat-select>
[26]<label >Status</label>
[27]<mat-select role="combobox" placeholder="Select Status" tabindex="0" aria-expanded="false">All</mat-select>
[28]<label >LOB</label>
[29]<mat-select role="combobox" placeholder="Select LOB" tabindex="0" aria-expanded="false">All</mat-select>
[30]<label >Regions Affected</label>
[31]<mat-select role="combobox" placeholder="Select Regions Affected" tabindex="0" aria-expanded="false">All</mat-select>
[32]<label >Action Owner</label>
[33]<mat-select role="combobox" placeholder="Select Action Owner" tabindex="0" aria-expanded="false">All</mat-select>
[34]<label >Regions</label>
[35]<mat-select role="combobox" placeholder="Select Regions" tabindex="0" aria-expanded="false">All</mat-select>
[36]<label >Effectivity Date FROM</label>
[37]<input placeholder="Select Effectivity From Date"></input>
[38]<button type="button" aria-label="Open calendar" tabindex="0"></button>
[39]<label >Effectivity Date TO</label>
[40]<input placeholder="Select Effectivity To Date"></input>
[41]<button type="button" aria-label="Open calendar" tabindex="0"></button>
[42]<button type="submit" value="Submit">GO</button>
[43]<button >RESET</button>
[44]<a ></a>
[45]<button type="button">DOWNLOAD TEMPLATE</button>
[End of page]
Current date and time: 2025-04-01 11:42

 RESPONSE
{
  "current_state": {
    "page_summary": "The current page is the PRISM CM Adapter change objects search page. It contains various navigation links, buttons, and input fields for searching change objects.",
    "evaluation_previous_goal": "Unknown - This is the initial state.",
    "memory": "The user has logged in with username <secret>x_name</secret> and password <secret>x_password</secret>. The current URL is https://prism-cm-adapter-ge4.pnp4.pcf.dell.com/change-objects/search. The user is currently on the change objects search page and needs to navigate to the component pets and visits to add a visit. 0 out of 1 visits added. Available tabs: [TabInfo(page_id=0, url='about:blank', title=''), TabInfo(page_id=1, url='https://prism-cm-adapter-ge4.pnp4.pcf.dell.com/change-objects/search', title='Prism CM Adapter')].",
    "next_goal": "Find the component pets and visits"
  },
  "action": [
    {
      "click_element": {
        "index": 4
      }
    }
  ]
}